//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;
using Xunit;

namespace UnitsNet.Tests
{
    public partial class IQuantityTests
    {
        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            void Assertion(int expectedValue, Enum expectedUnit, IQuantity quantity)
            {
                Assert.Equal(expectedUnit, quantity.Unit);
                Assert.Equal(expectedValue, quantity.Value);
            }

            Assertion(3, AmountOfSubstanceUnit.PoundMole, Quantity.From(3, AmountOfSubstanceUnit.PoundMole));
            Assertion(3, DurationUnit.Year365, Quantity.From(3, DurationUnit.Year365));
            Assertion(3, ElectricCurrentUnit.Picoampere, Quantity.From(3, ElectricCurrentUnit.Picoampere));
            Assertion(3, LengthUnit.Yard, Quantity.From(3, LengthUnit.Yard));
            Assertion(3, LuminousIntensityUnit.Candela, Quantity.From(3, LuminousIntensityUnit.Candela));
            Assertion(3, MassUnit.Tonne, Quantity.From(3, MassUnit.Tonne));
            Assertion(3, PressureUnit.Torr, Quantity.From(3, PressureUnit.Torr));
            Assertion(3, TemperatureUnit.SolarTemperature, Quantity.From(3, TemperatureUnit.SolarTemperature));
        }

        [Fact]
        public void QuantityInfo_IsSameAsStaticInfoProperty()
        {
            void Assertion(QuantityInfo expected, IQuantity quantity) => Assert.Same(expected, quantity.QuantityInfo);

            Assertion(AmountOfSubstance.Info, AmountOfSubstance.Zero);
            Assertion(Duration.Info, Duration.Zero);
            Assertion(ElectricCurrent.Info, ElectricCurrent.Zero);
            Assertion(Length.Info, Length.Zero);
            Assertion(LuminousIntensity.Info, LuminousIntensity.Zero);
            Assertion(Mass.Info, Mass.Zero);
            Assertion(Pressure.Info, Pressure.Zero);
            Assertion(Temperature.Info, Temperature.Zero);
        }

        [Fact]
        public void Dimensions_IsSameAsStaticBaseDimensions()
        {
            void Assertion(BaseDimensions expected, IQuantity quantity) => Assert.Equal(expected, quantity.Dimensions);

            Assertion(AmountOfSubstance.BaseDimensions, AmountOfSubstance.Zero);
            Assertion(Duration.BaseDimensions, Duration.Zero);
            Assertion(ElectricCurrent.BaseDimensions, ElectricCurrent.Zero);
            Assertion(Length.BaseDimensions, Length.Zero);
            Assertion(LuminousIntensity.BaseDimensions, LuminousIntensity.Zero);
            Assertion(Mass.BaseDimensions, Mass.Zero);
            Assertion(Pressure.BaseDimensions, Pressure.Zero);
            Assertion(Temperature.BaseDimensions, Temperature.Zero);
        }
    }
}
